# This is a basic workflow to help you get started with Actions

name: MainFlow

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  code_quality:
    name: Check code quality
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Check code quality
        uses: codeinspectorio/github-action@master
        with:
          repo_token: ${{ secrets.GIT_TOKEN }}
          code_inspector_access_key: ${{ secrets.CODE_INSPECTOR_ACCESS_KEY }}
          code_inspector_secret_key: ${{ secrets.CODE_INSPECTOR_SECRET_KEY }}
          min_quality_grade: 'WARNING'
          min_quality_score: '0'
          max_complex_functions_rate: '0.1'
          max_long_functions_rate: '0.1'
          max_defects_rate: '0.1'
          max_violations_rate: '0.1'
          
          
  unit_test_vote:
    name: Unit Test with Python
    runs-on: ubuntu-latest
    needs: [code_quality]
    strategy:
      matrix:
        python-version: [3.7]
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'
      
      - name: Install dependencies
        run: |
          cd ./vote
          pip install -r requirements.txt
     
      - name: PyTest
        run: python -m pytest test --junit-xml pytest.xml
     
      - name: Upload Unit Test Results
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: Unit Test Results (Python ${{ matrix.python-version }})
          path: pytest.xml
          
        
  publish-test-results:
    name: "Publish Unit Tests Results"
    needs: [unit_test_vote]
    runs-on: ubuntu-latest
    # the build-and-test job might be skipped, we don't need to run this job then
    if: success() || failure()

    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v2
        with:
          path: artifacts

      - name: Publish Unit Test Results
        uses: EnricoMi/publish-unit-test-result-action@v1.5
        with:
          check_name: Unit Test Results
          github_token: ${{ secrets.GIT_TOKEN }}
          files: pytest.xml

      
  result_build_and_push:
    name: Result build and push
    runs-on: ubuntu-latest
    needs: [code_quality]
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2
        
      - name: DockerHub Login
        run: docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_PASSWORD }}
      
      - name: Build Docker Images
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/result ./result
         
      - name: Push Docker Images
        run: |
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/result
          
          
  vote_build_and_push:
    name: Vote build and push
    runs-on: ubuntu-latest
    needs: [code_quality, unit_test_vote]
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2
        
      - name: DockerHub Login
        run: docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_PASSWORD }}
      
      - name: Build Docker Images
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/vote ./vote
      
      - name: Push Docker Images
        run: |
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/vote
          
          
  worker_build_and_push:
    name: Worker build and push
    runs-on: ubuntu-latest
    needs: [code_quality]
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2
        
      - name: DockerHub Login
        run: docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_PASSWORD }}
      
      - name: Build Docker Images
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/worker ./worker
      
      - name: Push Docker Images
        run: |
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/worker
     
 
  deploy_result_to_heroku:
    name: Deploy result to heroku
    runs-on: ubuntu-latest
    needs: [result_build_and_push]
   
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2
     
      - name: Heroku Login
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
        run: |
          heroku container:login
          
      - name: Set ENV
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
        run: heroku config:set POSTGRES_URI=${{ secrets.POSTGRES_URI }} -a result-is3
      
      - name: Push and Release
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
        run: |
          cd ./result
          heroku container:push -a result-is3 web
          heroku container:release -a result-is3 web
          
          
  deploy_vote_to_heroku:
    name: Deploy vote to heroku
    runs-on: ubuntu-latest
    needs: [vote_build_and_push]
   
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2
     
      - name: Heroku Login
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
        run: |
          heroku container:login
          
      - name: Set ENV
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
        run: |
          heroku config:set REDIS_PORT=${{ secrets.REDIS_PORT }} -a vote-is3
          heroku config:set REDIS_HOST=${{ secrets.REDIS_HOST }} -a vote-is3
          heroku config:set REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }} -a vote-is3
      
      - name: Push and Release
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
        run: |
          cd ./vote
          heroku container:push -a vote-is3 web
          heroku container:release -a vote-is3 web


  deploy_worker_to_heroku:
    name: Deploy worker to heroku
    runs-on: ubuntu-latest
    needs: [worker_build_and_push]
   
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2
     
      - name: Heroku Login
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
        run: |
          heroku container:login
          
      #- name: Set ENV
        #env:
        #  HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
        #run: |
        #  heroku config:set REDIS_PORT=${{ secrets.REDIS_PORT }} -a worker-is3
        #  heroku config:set REDIS_HOST=${{ secrets.REDIS_HOST }} -a worker-is3
        #  heroku config:set REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }} -a worker-is3
        #  heroku config:set POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} -a worker-is3
        #  heroku config:set POSTGRES_HOST=${{ secrets.POSTGRES_HOST }} -a worker-is3
        #  heroku config:set POSTGRES_DB=${{ secrets.POSTGRES_DB }} -a worker-is3
        #  heroku config:set POSTGRES_USER=${{ secrets.POSTGRES_USER }} -a worker-is3
      
      - name: Push and Release
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
        run: |
          cd ./worker
          heroku container:push -a worker-is3 web
          heroku container:release -a worker-is3 web
